# WealthSage - Technology Stack Documentation

## üöÄ FRONTEND TECHNOLOGIES

### Core Framework & Libraries
- **React 18.2.0** - Modern JavaScript library for building user interfaces
- **React DOM 18.2.0** - React package for working with the DOM
- **React Router DOM 6.x** - Declarative routing for React applications

### Styling & UI
- **Tailwind CSS 3.x** - Utility-first CSS framework for rapid UI development
- **PostCSS** - Tool for transforming CSS with JavaScript plugins
- **Autoprefixer** - PostCSS plugin to parse CSS and add vendor prefixes

### Animation & Motion
- **Framer Motion 10.x** - Production-ready motion library for React
  - Used for: Page transitions, scroll animations, hover effects, component animations
  - Features: Gesture recognition, drag & drop, layout animations

### Icons & Graphics
- **Lucide React** - Beautiful & consistent icon toolkit
  - Icons used: Sparkles, DollarSign, Target, TrendingUp, Award, Bell, Settings, etc.
  - Provides 1000+ customizable SVG icons

### Build Tools & Development
- **Vite 4.x** - Next generation frontend tooling
  - Features: Fast HMR, optimized builds, ES modules support
- **ESLint** - JavaScript linting utility
- **@vitejs/plugin-react** - Official Vite plugin for React support

## üî• BACKEND TECHNOLOGIES

### Core Framework
- **FastAPI** - Modern, fast web framework for building APIs with Python
- **Uvicorn** - Lightning-fast ASGI server implementation
- **Python 3.8+** - Programming language

### Database & Authentication
- **Firebase Authentication** - Google's authentication service
  - Features: Email/password auth, user management, security rules
- **Firebase Firestore** - NoSQL document database
  - Used for: User profiles, role management, application data storage

### API Integration & Data Processing
- **Tavily API** - AI-powered search and data retrieval service
  - Used for: Student income opportunities, scholarship data, financial information
- **Requests** - HTTP library for Python API calls
- **Pydantic** - Data validation using Python type annotations

### CORS & Middleware
- **FastAPI CORS Middleware** - Cross-Origin Resource Sharing support
- **Starlette** - Lightweight ASGI framework (FastAPI dependency)

## üîê AUTHENTICATION & SECURITY

### Firebase Integration
- **Firebase SDK 9.x** - Modular Firebase JavaScript SDK
  - firebase/app - Core Firebase app
  - firebase/auth - Authentication services
  - firebase/firestore - Cloud Firestore database

### Security Features
- **JWT Tokens** - JSON Web Tokens for secure authentication
- **Role-based Access Control** - User roles (Student, Professional, Homemaker, Elderly)
- **Protected Routes** - Route-level authentication guards
- **Input Validation** - Form validation and sanitization

## üì± RESPONSIVE DESIGN & ACCESSIBILITY

### CSS Framework Features
- **Responsive Grid System** - Mobile-first responsive design
- **Flexbox Utilities** - Modern layout system
- **Custom Gradients** - Beautiful gradient backgrounds and effects
- **Glass Morphism** - Backdrop blur effects and translucent elements

### Semantic HTML
- **Semantic Tags** - Proper use of <main>, <section>, <header>, <footer>, <nav>
- **Accessibility** - ARIA labels, proper contrast ratios, keyboard navigation
- **SEO Optimization** - Proper meta tags and semantic structure

## üé® DESIGN SYSTEM

### Color Palette
- **Primary Colors** - Blue (#3B82F6) to Purple (#8B5CF6) gradients
- **Secondary Colors** - Emerald, Teal, Orange, Pink accent colors
- **Neutral Colors** - Slate and Gray color scales
- **Background** - Gradient backgrounds from slate to blue to indigo

### Typography
- **Font System** - System font stack with fallbacks
- **Font Weights** - 400 (normal), 500 (medium), 600 (semibold), 700 (bold)
- **Text Sizes** - Responsive typography scale (text-sm to text-7xl)

### Component Design
- **Card Components** - Rounded corners (rounded-xl, rounded-2xl, rounded-3xl)
- **Shadow System** - Multiple shadow levels (shadow-sm to shadow-2xl)
- **Hover Effects** - Scale transforms, color transitions, shadow changes

## üîÑ STATE MANAGEMENT

### React Context API
- **AuthContext** - Global authentication state management
  - User authentication status
  - User profile data
  - Role-based permissions
  - Login/logout functionality

### Local State Management
- **React Hooks** - useState, useEffect, useRef, useCallback, useMemo
- **Custom Hooks** - Reusable stateful logic
- **Session Storage** - Client-side data caching for performance

## üìä DATA FLOW & API INTEGRATION

### API Architecture
- **RESTful APIs** - Standard HTTP methods (GET, POST, PUT, DELETE)
- **JSON Data Format** - Structured data exchange
- **Error Handling** - Comprehensive error responses and user feedback

### Student Income API
- **Endpoint** - `/api/opportunities/Scholarships`
- **Data Source** - Tavily API integration
- **Caching Strategy** - Session storage with 5-10 minute expiry
- **Fallback Data** - Mock data for offline/error scenarios

## üöÄ PERFORMANCE OPTIMIZATIONS

### Code Splitting
- **React.lazy()** - Dynamic imports for pages
- **Suspense** - Loading states for lazy-loaded components
- **Bundle Optimization** - Reduced initial bundle size

### Caching Strategy
- **Session Storage** - API response caching
- **Browser Caching** - Static asset caching
- **Memory Management** - Efficient component re-rendering

### Animation Performance
- **GPU Acceleration** - Transform and opacity animations
- **Intersection Observer** - Scroll-triggered animations
- **Debounced Interactions** - Optimized user input handling

## üõ†Ô∏è DEVELOPMENT TOOLS

### Package Management
- **npm** - Node.js package manager
- **package.json** - Dependency management and scripts

### Development Scripts
- **npm run dev** - Development server with hot reload
- **npm run build** - Production build optimization
- **npm run preview** - Preview production build locally

### Code Quality
- **ESLint Configuration** - JavaScript/React linting rules
- **Prettier** - Code formatting (if configured)
- **Git Integration** - Version control system

## üåê DEPLOYMENT & HOSTING

### Frontend Deployment
- **Static Site Hosting** - Optimized for Vercel, Netlify, or similar
- **Build Output** - Optimized static files in dist/ directory
- **Environment Variables** - Configuration for different environments

### Backend Deployment
- **ASGI Server** - Uvicorn for production deployment
- **Environment Configuration** - Python virtual environment
- **API Documentation** - Auto-generated FastAPI docs at /docs

## üìÅ PROJECT STRUCTURE

### Frontend Structure
```
frontend/src/
‚îú‚îÄ‚îÄ components/          # Reusable UI components
‚îú‚îÄ‚îÄ pages/              # Main application pages
‚îÇ   ‚îú‚îÄ‚îÄ auth/           # Authentication pages
‚îÇ   ‚îú‚îÄ‚îÄ LandingPage.jsx # Public homepage
‚îÇ   ‚îú‚îÄ‚îÄ StudentDashboard.jsx # Student role dashboard
‚îÇ   ‚îî‚îÄ‚îÄ OtherRolesDashboard.jsx # Other roles dashboard
‚îú‚îÄ‚îÄ context/            # React context providers
‚îú‚îÄ‚îÄ config/             # Configuration files
‚îî‚îÄ‚îÄ App.jsx             # Main application component
```

### Backend Structure
```
backend/
‚îú‚îÄ‚îÄ app/                # FastAPI application
‚îÇ   ‚îú‚îÄ‚îÄ main.py         # Main application file
‚îÇ   ‚îî‚îÄ‚îÄ ...             # Additional modules
‚îî‚îÄ‚îÄ requirements.txt    # Python dependencies
```

## üîë API KEYS & CONFIGURATION

### Environment Variables Required
- **TAVILY_API_KEY** - For student income opportunities data
- **FIREBASE_CONFIG** - Firebase project configuration
- **CORS_ORIGINS** - Allowed frontend origins

### Configuration Files
- **firebase.js** - Firebase SDK configuration
- **vite.config.js** - Vite build configuration
- **tailwind.config.js** - Tailwind CSS configuration
- **postcss.config.js** - PostCSS configuration

## üìà FEATURES IMPLEMENTED

### Authentication System
- ‚úÖ User registration with role selection
- ‚úÖ Email/password login
- ‚úÖ Forgot password functionality
- ‚úÖ Protected route navigation
- ‚úÖ Role-based dashboard routing

### Student Dashboard
- ‚úÖ Income sources integration with Tavily API
- ‚úÖ Savings goals tracking with progress visualization
- ‚úÖ Smart budget suggestions
- ‚úÖ Investment placeholder for future features
- ‚úÖ Community statistics and tips
- ‚úÖ Quick actions and notifications

### Landing Page
- ‚úÖ Hero section with animated backgrounds
- ‚úÖ Features showcase with icons and animations
- ‚úÖ About section with mission statement
- ‚úÖ Call-to-action sections
- ‚úÖ Professional footer with links

### Other Role Dashboards
- ‚úÖ Role-specific welcome messages
- ‚úÖ "Under development" professional messaging
- ‚úÖ Consistent design language
- ‚úÖ Future-ready architecture

## üéØ BROWSER COMPATIBILITY

### Supported Browsers
- **Chrome 90+** - Full feature support
- **Firefox 88+** - Full feature support
- **Safari 14+** - Full feature support
- **Edge 90+** - Full feature support

### Progressive Enhancement
- **Fallback Styles** - Graceful degradation for older browsers
- **Polyfills** - ES6+ feature support where needed
- **Responsive Design** - Mobile-first approach

## üì± MOBILE RESPONSIVENESS

### Breakpoints
- **sm** - 640px and up (small tablets)
- **md** - 768px and up (tablets)
- **lg** - 1024px and up (laptops)
- **xl** - 1280px and up (desktops)
- **2xl** - 1536px and up (large screens)

### Mobile Features
- **Touch-friendly** - Appropriate touch targets
- **Swipe Gestures** - Mobile navigation patterns
- **Optimized Performance** - Reduced animations on mobile
- **Viewport Meta Tag** - Proper mobile scaling

---

## üîÑ FUTURE ENHANCEMENTS READY

### Planned Technologies
- **Three.js** - 3D visualizations and interactive graphics
- **Chart.js/D3.js** - Advanced data visualization
- **Socket.io** - Real-time features
- **PWA Features** - Progressive Web App capabilities
- **TypeScript** - Type safety and better developer experience

### Scalability Considerations
- **Component Library** - Reusable design system
- **State Management** - Redux/Zustand for complex state
- **Testing Framework** - Jest/React Testing Library
- **CI/CD Pipeline** - Automated testing and deployment

---

**Total Technologies Used: 25+ libraries and frameworks**
**Last Updated: December 2024**
**Platform Status: Production Ready**
